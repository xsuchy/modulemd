#!/usr/bin/python3


import argparse
from typing import Generator
import sys

import requests
from modulemd import ModuleMetadata


class RpmContentError(ValueError):
    """Metadata contains invalid/nonexistent srpm or commit."""

    REASONS = {
        400: 'Bad hash',
        404: 'Nonexistent rpm',
    }
    """Mapping of HTTP status codes to actual failure reasons."""

    def __init__(self, package, commit, status_code):
        super().__init__(self, package, commit, status_code)

        self.package = package
        self.commit = commit
        self.status_code = status_code

    def __repr__(self):
        return 'RpmContentError({pkg}, {commit}, {status})'.format(
            pkg=self.package,
            commit=self.commit,
            status=self.status_code
        )

    def __str__(self):
        return '{pkg} [{commit}]: {reason}'.format(
            pkg=self.package,
            commit=self.commit,
            reason=self.REASONS.get(self.status_code, 'Unknown error')
        )

def existing_content(mmd: ModuleMetadata) -> Generator[str, None, None]:
    """Check that rpm content points to existing repo (commit).

    For each package in the module, this function queries the dist-git
    and use the status code for determining if the package (and
    optionally commit) exists.

    Keyword arguments:
        mmd -- The checked module metadata object.

    Yields:
        Error messages for invalid packages.
    """

    ERRORS = {
        400: 'Bad hash',
        404: 'Nonexistent rpm',
    }

    # TODO: Get URL from the metadata
    CGIT_URL_TEMPLATE = 'http://pkgs.fedoraproject.org/cgit/rpms/{name}.git/commit'

    try:
        packages = mmd.components.rpms.packages
    except AttributeError:
        return None

    for package, details in packages.items():
        if 'commit' in details:
            payload = {'id': details['commit']}
        else:
            payload = {}

        response = requests.head(
                CGIT_URL_TEMPLATE.format(name=package),
                params=payload
        )

        # XXX: Maybe yield tuple instead?
        if response.status_code != requests.codes.ok:
            yield '{pkg} [{hash}]: {msg}'.format(
                    pkg=package,
                    hash=details.get('commit', 'HEAD'),
                    msg=ERRORS[response.status_code]
            )


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Validate module metadata.')

    # Positional arguments
    parser.add_argument('file', help='Input metadata file')

    args = parser.parse_args()

    metadata = ModuleMetadata()

    all_went_well = True

    try:
        metadata.load(args.file)
    except ValueError as invalid_input_metadata:
        message = 'ERROR: Invalid input: {!s}'.format(invalid_input_metadata)
        raise SystemExit(message)

    try:
        metadata.validate()
    except (TypeError, ValueError) as invalid_metadata_structure:
        all_went_well = False
        print('ERROR: Invalid structure:', str(invalid_metadata_structure),
              file=sys.stderr)

    for error in existing_content(metadata):
        all_went_well = False
        print('RPM CONTENT ERROR:', error, file=sys.stderr)

    if all_went_well:
        print('Everything OK')
    else:
        raise SystemExit(1)
